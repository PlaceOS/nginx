pid /var/run/nginx.pid;
daemon off;
worker_processes  1;
error_log stderr notice;

events {
    worker_connections  1024;
}

env JWT_PUBLIC;
env INFLUX_API_KEY;
env HTTPS_REDIRECT_PORT;

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;
    log_format request_upstream '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $body_bytes_sent '
      '"$http_referer" "$http_user_agent" '
      '$request_time $upstream_response_time';
    access_log /dev/stdout request_upstream;
    sendfile    on;
    tcp_nopush  on;
    gzip        on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml image/svg+xml application/octet-stream application/json;

    server {
        listen 80 default_server;
        server_name _;
        set_by_lua $https_redirect_port 'return os.getenv("HTTPS_REDIRECT_PORT")';
        return 301 https://$host:$https_redirect_port$request_uri;
    }

    server {
        listen 443 default_server http2 ssl;

        ssl_certificate     /etc/nginx/ssl/default-domain/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/default-domain/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        resolver 127.0.0.11 valid=10s;
        set $api          api:3000;
        set $auth         auth:8080;
        set $dispatch     dispatch:8086;
        set $staff        staff:8080;
        set $chronograf   chronograf:8888;
        set $kibana       kibana:5601;
        set $mosquitto    mosquitto:9001;

        location ~ /\. {
            deny all;
        }

        location /analytics/ {
            proxy_pass  http://$chronograf;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_connect_timeout 1m;
            proxy_send_timeout 2m;
            proxy_read_timeout 5m;
        }

        location /api/ {
            set $cors '';
            if ($http_origin ~ '^https?:\/\/(www\.test\-cors\.org|portal\-dev\.placeos\.run|portal\.placeos\.run)') {
              set $cors 'true';
            }

            if ($cors = 'true') {
              add_header 'Access-Control-Allow-Origin' "$http_origin" always;
              add_header 'Access-Control-Allow-Credentials' 'true' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-API-Key' always;
              # required to be able to read Authorization header in frontend
              add_header 'Access-Control-Expose-Headers' 'Authorization,X-API-Key' always;
            }

            if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' "$http_origin" always;
              add_header 'Access-Control-Allow-Credentials' 'true' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-API-Key' always;
              # Tell client that this pre-flight info is valid for 20 days
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain charset=UTF-8';
              add_header 'Content-Length' 0;
              return 204;
            }
            
            proxy_pass  http://$api;
            proxy_redirect   off;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 5m;
            proxy_send_timeout 5m;
            proxy_read_timeout 5m;

            location /api/dispatch/ {
                proxy_pass  http://$dispatch;
            }

            location /api/files/ {
              set $cors '';
              if ($http_origin ~ '^https?:\/\/(www\.test\-cors\.org|portal\-dev\.placeos\.run|portal\.placeos\.run)') {
                set $cors 'true';
              }

              if ($cors = 'true') {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-API-Key' always;
                # required to be able to read Authorization header in frontend
                add_header 'Access-Control-Expose-Headers' 'Authorization,X-API-Key' always;
              }

              if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-API-Key' always;
                # Tell client that this pre-flight info is valid for 20 days
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
              }
                
              proxy_pass  http://$auth;
            }

            location /api/mqtt/ {
                proxy_pass  http://$mosquitto/;
            }

            location /api/staff/ {
                proxy_pass  http://$staff;
            }
        }

        location /auth/ {
            set $cors '';
            if ($http_origin ~ '^https?:\/\/(www\.test\-cors\.org|portal\-dev\.placeos\.run|portal\.placeos\.run)') {
              set $cors 'true';
            }
            if ($cors = 'true') {
              add_header 'Access-Control-Allow-Origin' "$http_origin" always;
              add_header 'Access-Control-Allow-Credentials' 'true' always;
              add_header 'Access-Control-Allow-Methods' 'POST, GET, OPTIONS, DELETE, PUT, PATCH' always;
              add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            }
            
            proxy_pass  http://$auth;
            proxy_redirect   off;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 1m;
            proxy_send_timeout 2m;
            proxy_read_timeout 2m;
        }

        location /monitor/ {
            auth_basic "Login";
            auth_basic_user_file /etc/nginx/.htpasswd-kibana;
            proxy_pass  http://$kibana;
            proxy_redirect   off;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 1m;
            proxy_send_timeout 2m;
            proxy_read_timeout 2m;
        }

        location / {
            absolute_redirect on;
            if ($request_uri ~ ^([^.\?]*[^/])$) {
                return 301 https://$http_host$uri/;
            }
            root /etc/nginx/html;
            try_files $uri $uri/index.html =404;
        }
        
        # Deny .* (e.g. .git/)
        location ~ /\. {
          deny all;
        }
    }
}
