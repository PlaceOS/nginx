worker_processes  1;
error_log stderr notice;

events {
    worker_connections  1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;
    log_format request_upstream '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $body_bytes_sent '
      '"$http_referer" "$http_user_agent" '
      '$request_time $upstream_response_time';
    access_log /dev/stdout request_upstream;
    sendfile    on;
    tcp_nopush  on;
    gzip        on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml image/svg+xml application/octet-stream application/json;

    server {
        listen 8080 default_server;
        
        location ~* ^/(favicon\.ico|index\.html|login|nginx-error|scripts|styles|.*\.webmanifest)($|/) {
            root /etc/nginx/html;
            try_files $uri $uri/index.html =404;
        }

        location / {
            absolute_redirect on;

            if ($request_uri ~ ^([^.\?]*[^/])$) {
                return 301 https://$http_host$uri/;
            }

            # Optional optimisation: Check if the secure cookie exists
            # if ($has_verified = 0) {
            #     # Redirect to /auth/login?continue={{url}}
            #     rewrite ^ /auth/login?continue=$request_uri? last;
            # }

            # validate the verification cookie
            access_by_lua_block {
                local resty_string = require "resty.string"
                local hmac = require "resty.hmac"
                local ngx = require "ngx"

                -- Get the cookie from NGINX
                local cookie = ngx.unescape_uri(ngx.var.cookie_verified or "")
                local secret = "${SECRET_KEY_BASE}"

                -- Split the cookie value based on "."
                local idx = string.find(cookie, ".", 1, true)
                if not idx then
                    -- handle the case where the cookie doesnt contain "--"
                    ngx.log(ngx.ERR, "Invalid cookie format")
                    local redirect_uri = "/auth/login?continue=" .. ngx.escape_uri(ngx.var.request_uri)
                    ngx.redirect(redirect_uri)
                end

                -- Split the cookie value based on "."
                local data = string.sub(cookie, 1, idx - 1)
                local signature = string.sub(cookie, idx + 1)

                -- Compute the HMAC digest
                local h = hmac:new(secret, hmac.ALGOS.SHA256)
                if not h then
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                local raw_hmac = h:final(data)
                local expected_hmac = resty_string.to_hex(raw_hmac)

                -- Compare the digest with the verify part of the cookie                
                if expected_hmac ~= signature then
                    local redirect_uri = "/auth/login?continue=" .. ngx.escape_uri(ngx.var.request_uri)
                    ngx.redirect(redirect_uri)
                end
            }

            root /etc/nginx/html;
            try_files $uri $uri/index.html =404;
        }
    }
}
